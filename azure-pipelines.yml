# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

name: preview.$(Date:yyyyMMdd)$(Rev:.rr)

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  libraryProjects: '**/Library/**/*.csproj'
  frameworkProjects: '**/Framework/**/*.csproj'

steps:

- script: echo 'Build Number - $(Build.BuildNumber)'

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '5.0.x'
    vsVersion: '16.8.0'
    includePreviewVersions: true


- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '3.1.x'
    vsVersion: '16.8.0'

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '$(libraryProjects)'
    feedsToUse: 'select'
  displayName: 'Restore for Library'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '$(libraryProjects)'
    arguments: '--configuration $(buildConfiguration) /p:CLIBuild=true'
  displayName: 'Build Library'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '$(libraryProjects)'
    arguments: '--configuration $(buildConfiguration)'
    publishTestResults: false

- task: DotNetCoreCLI@2
  inputs:
    command: 'pack'
    packagesToPack: '$(libraryProjects)'
    versioningScheme: 'byBuildNumber'

# install the nupkg we just packed
- task: NuGetCommand@2
  inputs:
    command: 'custom'
    arguments: 'add Decuplr.Sourceberg.Diagnostics.1.0.0-$(Build.BuildNumber).nupkg -Source $(Build.ArtifactStagingDirectory)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '$(frameworkProjects)'
    feedsToUse: 'select'
  displayName: 'Restore for Framework'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '$(frameworkProjects)'
    arguments: '--configuration $(buildConfiguration) /p:CLIBuild=true'
  displayName: 'Build Library'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '$(frameworkProjects)'
    arguments: '--configuration $(buildConfiguration)'
    publishTestResults: false

- task: DotNetCoreCLI@2
  inputs:
    command: 'pack'
    packagesToPack: '$(frameworkProjects)'
    arguments: '/p:CLIBuild=true'
    versioningScheme: 'byBuildNumber'

# this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'producted-resource'

- task: NuGetCommand@2
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '923593c5-d46b-4e5f-a025-2be584aed5c3/e54287c5-ab76-497c-ab3b-4ec175185a21'